name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Lint frontend
        run: pnpm lint

      - name: Type check frontend
        run: pnpm type-check

      - name: Lint Rust
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Format check Rust
        run: cargo fmt --all -- --check

      - name: Test Rust
        run: cargo test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Setup signing key (Windows only)
        if: matrix.platform == 'windows'
        run: |
          $keyPath = "$env:USERPROFILE\.tauri\wasla_desktop_app.key"
          $keyDir = Split-Path $keyPath -Parent
          if (-not (Test-Path $keyDir)) {
            New-Item -ItemType Directory -Path $keyDir -Force
          }
          echo "$env:TAURI_PRIVATE_KEY" | Out-File -FilePath $keyPath -Encoding utf8
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasla-desktop-${{ matrix.platform }}-${{ github.sha }}
          path: |
            src-tauri/target/release/bundle/
          retention-days: 30

  release:
    name: Release
    runs-on: windows-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Setup signing key
        run: |
          $keyPath = "$env:USERPROFILE\.tauri\wasla_desktop_app.key"
          $keyDir = Split-Path $keyPath -Parent
          if (-not (Test-Path $keyDir)) {
            New-Item -ItemType Directory -Path $keyDir -Force
          }
          echo "$env:TAURI_PRIVATE_KEY" | Out-File -FilePath $keyPath -Encoding utf8
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List build artifacts (for debugging)
        run: |
          Write-Host "Listing build artifacts:"
          Get-ChildItem -Recurse src-tauri/target/release/bundle/ | Select-Object FullName
          
          Write-Host "`nChecking for updater files:"
          Write-Host "MSI Updater files:"
          Get-ChildItem src-tauri/target/release/bundle/msi/ -Name | Where-Object { $_ -like "*.zip*" }
          Write-Host "NSIS Updater files:"
          Get-ChildItem src-tauri/target/release/bundle/nsis/ -Name | Where-Object { $_ -like "*.zip*" }
          
          Write-Host "`nFull MSI directory contents:"
          Get-ChildItem src-tauri/target/release/bundle/msi/ -Name
          Write-Host "`nFull NSIS directory contents:"
          Get-ChildItem src-tauri/target/release/bundle/nsis/ -Name

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/msi/*.zip
            src-tauri/target/release/bundle/msi/*.zip.sig
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/nsis/*.zip
            src-tauri/target/release/bundle/nsis/*.zip.sig
          draft: false
          prerelease: false
          body: |
            ## What's Changed
            
            This release includes the latest updates for Wasla Desktop Application.
            
            ## Installation
            
            Download the appropriate installer for your system:
            - **Windows (MSI)**: Use the `.msi` file for automatic installation
            - **Windows (NSIS)**: Use the `.exe` file for manual installation
            
            ## Auto-Update
            
            The application will automatically check for updates and notify you when a new version is available.
            
            ### Updater Files Included:
            - **MSI Updater**: `.msi.zip` and `.msi.zip.sig` files
            - **NSIS Updater**: `.exe.zip` and `.exe.zip.sig` files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}